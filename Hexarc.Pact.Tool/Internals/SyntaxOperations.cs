using System;
using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Hexarc.Pact.Tool.Internals
{
    public static class SyntaxOperations
    {
        public static MemberDeclarationSyntax TryWrapInNamespace(String? @namespace, MemberDeclarationSyntax memberDeclaration) =>
            String.IsNullOrEmpty(@namespace) ? memberDeclaration : WrapInNamespace(@namespace, memberDeclaration);

        public static IEnumerable<MemberDeclarationSyntax> TryWrapInNamespace(String? @namespace, IEnumerable<MemberDeclarationSyntax> memberDeclarations) =>
            String.IsNullOrEmpty(@namespace) ? memberDeclarations : EnumerableFactory.FromOne(WrapInNamespace(@namespace, memberDeclarations));

        public static NamespaceDeclarationSyntax WrapInNamespace(String @namespace, MemberDeclarationSyntax memberDeclaration) =>
            NamespaceDeclaration(IdentifierName(@namespace)).WithMembers(SingletonList(memberDeclaration));

        public static NamespaceDeclarationSyntax WrapInNamespace(String @namespace, IEnumerable<MemberDeclarationSyntax> memberDeclarations) =>
            NamespaceDeclaration(IdentifierName(@namespace)).WithMembers(List(memberDeclarations));

        public static SyntaxTriviaList EmitCodegenComment() =>
            TriviaList(
                Comment("// <auto-generated>"), LineFeed,
                Comment("// This code was generated by the Hexarc Pact tool. Do not edit."), LineFeed,
                Comment($"// Created: {DateTime.UtcNow:u}"), LineFeed,
                Comment("// </auto-generated>"), LineFeed, LineFeed);

        public static SyntaxTrivia NullableRestoreDirective { get; } =
            Trivia(
                NullableDirectiveTrivia(
                    Token(SyntaxKind.RestoreKeyword),
                    true));

        public static SyntaxTrivia NullableEnableDirective { get; } =
            Trivia(
                NullableDirectiveTrivia(
                        Token(SyntaxKind.EnableKeyword),
                        true)
                    .WithNullableKeyword(
                        Token(TriviaList(),
                            SyntaxKind.NullableKeyword,
                            TriviaList(
                                Space)))
                    .WithEndOfDirectiveToken(
                        Token(
                            TriviaList(),
                            SyntaxKind.EndOfDirectiveToken,
                            TriviaList(
                                LineFeed))));
    }
}
